name: Deploy to Production

on:
  push:
    branches:
      - main
    paths:
      - "front/**"
      - "back/**"
      - "infra/modules/bedrock-agent/lambda/**"
      - ".github/workflows/deploy-production.yml"

  workflow_dispatch: # 手動実行も可能

env:
  AWS_REGION: ap-northeast-1
  ENVIRONMENT: production

jobs:
  # フロントエンドは Amplify が自動デプロイするのでスキップ
  # Amplify は main ブランチへのプッシュを検知して自動ビルド・デプロイします

  # 変更検出
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      bedrock: ${{ steps.filter.outputs.bedrock }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v5.2.2

      - name: Check for changes
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
          filters: |
            backend:
              - 'back/**'
            bedrock:
              - 'infra/modules/bedrock-agent/lambda/**'

  # メインAPI Lambda のデプロイ
  deploy-backend:
    name: Deploy Main API Lambda
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write # OIDC 用
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v5.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Production-Backend

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Build, tag, and push main API image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: feed-bower-api-production
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd back
          echo "Verifying source code before build:"
          grep -A 3 "GetTableNames.*TableNames" pkg/dynamodb/client.go || echo "Pattern not found"
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update main API Lambda function
        env:
          FUNCTION_NAME: feed-bower-api-production
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --image-uri $IMAGE_URI \
            --region ${{ env.AWS_REGION }}

      - name: Wait for Lambda update to complete
        env:
          FUNCTION_NAME: feed-bower-api-production
        run: |
          aws lambda wait function-updated \
            --function-name $FUNCTION_NAME \
            --region ${{ env.AWS_REGION }}

      - name: Deployment summary
        run: |
          echo "✅ Main API Lambda deployed to production"
          echo "📦 Image: ${{ steps.build-image.outputs.image }}"
          echo "🔗 Function: feed-bower-api-production"

  # Bedrock Lambda のデプロイ
  deploy-bedrock-lambda:
    name: Deploy Bedrock Lambda
    needs: detect-changes
    if: needs.detect-changes.outputs.bedrock == 'true'
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write # OIDC 用
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v5.2.2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Production-Bedrock

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Build, tag, and push Bedrock Lambda image to Amazon ECR
        id: build-bedrock-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: feed-bower-bedrock-lambda-production
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd infra/modules/bedrock-agent/lambda
          docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update Bedrock Lambda function
        env:
          FUNCTION_NAME: feed-bower-production-feed-search
          IMAGE_URI: ${{ steps.build-bedrock-image.outputs.image }}
        run: |
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --image-uri $IMAGE_URI \
            --region ${{ env.AWS_REGION }}

      - name: Wait for Lambda update to complete
        env:
          FUNCTION_NAME: feed-bower-production-feed-search
        run: |
          aws lambda wait function-updated \
            --function-name $FUNCTION_NAME \
            --region ${{ env.AWS_REGION }}

      - name: Deployment summary
        run: |
          echo "✅ Bedrock Lambda deployed to production"
          echo "📦 Image: ${{ steps.build-bedrock-image.outputs.image }}"
          echo "🔗 Function: feed-bower-production-feed-search"

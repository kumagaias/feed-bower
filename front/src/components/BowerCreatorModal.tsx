'use client'

import { useState, useEffect } from 'react'
import { useApp } from '@/contexts/AppContext'
import { useTranslation } from '@/lib/i18n'
import { generateBowerName, isAutoGeneratedName } from '@/lib/bowerNameGenerator'
import { getKeywordColor } from '@/lib/colors'
import KeywordEditModal from './KeywordEditModal'

interface BowerCreatorModalProps {
  isOpen: boolean
  onClose: () => void
  onSave: (bower: { name: string; keywords: string[]; color: string }) => void
}

export default function BowerCreatorModal({ isOpen, onClose, onSave }: BowerCreatorModalProps) {
  const { language } = useApp()
  
  const [bowerName, setBowerName] = useState('')
  const [keywords, setKeywords] = useState<string[]>([])
  const [showKeywordModal, setShowKeywordModal] = useState(false)
  const [isEditingName, setIsEditingName] = useState(false)
  const [tempBowerName, setTempBowerName] = useState('')
  const [hasUserEditedName, setHasUserEditedName] = useState(false)
  const [autoRegisterFeeds, setAutoRegisterFeeds] = useState(true)
  const [maxAutoFeeds, setMaxAutoFeeds] = useState(5)

  // Reset when modal closes
  useEffect(() => {
    if (!isOpen) {
      setBowerName('')
      setKeywords([])
      setIsEditingName(false)
      setTempBowerName('')
      setHasUserEditedName(false)
      setAutoRegisterFeeds(true)
      setMaxAutoFeeds(5)
    }
  }, [isOpen])

  const handleSave = () => {
    if (keywords.length === 0) {
      alert(language === 'ja' ? 'キーワードを設定してください' : 'Please set keywords')
      return
    }

    const bower = {
      name: bowerName || keywords.join(', '),
      keywords,
      color: '#f59e0b', // Use accent color
      auto_register_feeds: autoRegisterFeeds,
      max_auto_feeds: maxAutoFeeds
    }

    onSave(bower)
    onClose()
  }

  const handleKeywordSave = (newKeywords: string[]) => {
    setKeywords(newKeywords)
    
    // Auto-generate bower name only if user hasn't manually edited it AND name is empty
    if (!hasUserEditedName && !bowerName.trim()) {
      const generatedName = generateBowerName(newKeywords, language)
      setBowerName(generatedName)
    }
  }

  const handleNameEdit = () => {
    setTempBowerName(bowerName)
    setIsEditingName(true)
  }

  const handleNameSave = () => {
    const newName = tempBowerName.trim() || generateBowerName(keywords, language)
    setBowerName(newName)
    setIsEditingName(false)
    // ユーザーが手動で名前を編集したことを記録
    setHasUserEditedName(true)
  }

  const handleNameCancel = () => {
    setTempBowerName('')
    setIsEditingName(false)
  }

  const handleNameKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleNameSave()
    } else if (e.key === 'Escape') {
      handleNameCancel()
    }
  }

  if (!isOpen) return null

  return (
    <>
      <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b bg-amber-100">
            <div className="flex items-center gap-2 flex-1">
              <div className="text-2xl">🪺</div>
              {isEditingName ? (
                <div className="flex items-center gap-2 flex-1">
                  <input
                    type="text"
                    value={tempBowerName}
                    onChange={(e) => setTempBowerName(e.target.value)}
                    onKeyDown={handleNameKeyPress}
                    onBlur={handleNameSave}
                    className="text-2xl font-bold text-gray-800 bg-white border border-gray-300 rounded px-3 py-2 flex-1 focus:ring-2 focus:ring-[#14b8a6] focus:border-transparent"
                    placeholder={language === 'ja' ? 'バウアー名を入力...' : 'Enter bower name...'}
                    autoFocus
                  />
                  <button
                    onClick={handleNameSave}
                    className="text-green-600 hover:text-green-800 text-sm"
                  >
                    ✓
                  </button>
                  <button
                    onClick={handleNameCancel}
                    className="text-red-600 hover:text-red-800 text-sm"
                  >
                    ✕
                  </button>
                </div>
              ) : (
                <h2 
                  className="text-2xl font-bold text-gray-800 cursor-pointer hover:text-[#14b8a6] transition-colors flex-1"
                  onClick={handleNameEdit}
                  title={language === 'ja' ? 'クリックして編集' : 'Click to edit'}
                >
                  {bowerName || (language === 'ja' ? '新しいバウアー' : 'New Bower')}
                  <span className="ml-2 text-lg text-gray-500">✏️</span>
                </h2>
              )}
            </div>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 text-2xl ml-4"
            >
              ✕
            </button>
          </div>

          {/* Content */}
          <div className="p-6">


            {/* Keywords Section */}
            <div className="mb-6">
              <label className="block text-base font-medium text-gray-700 mb-3">
                {language === 'ja' ? 'キーワード' : 'Keywords'}
              </label>
              
              {keywords.length === 0 ? (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-12 text-center">
                  <p className="text-gray-500 mb-4 text-lg">
                    {language === 'ja' ? 'キーワードを設定してください' : 'Please set keywords'}
                  </p>
                  <button
                    onClick={() => setShowKeywordModal(true)}
                    className="px-6 py-3 bg-[#14b8a6] text-white rounded-lg hover:bg-[#0f766e] transition-colors font-medium"
                  >
                    {language === 'ja' ? 'キーワード編集' : 'Edit Keywords'}
                  </button>
                </div>
              ) : (
                <div>
                  <div className="flex flex-wrap gap-2 mb-4">
                    {keywords.map((keyword, index) => (
                      <span
                        key={index}
                        className="px-3 py-1 text-white rounded-full text-sm"
                        style={{ backgroundColor: getKeywordColor(keyword) }}
                      >
                        {keyword}
                      </span>
                    ))}
                  </div>
                  <button
                    onClick={() => setShowKeywordModal(true)}
                    className="px-4 py-2 bg-[#14b8a6] text-white rounded-lg hover:bg-[#0f766e] transition-colors text-sm"
                  >
                    {language === 'ja' ? 'キーワード編集' : 'Edit Keywords'}
                  </button>
                </div>
              )}
            </div>

            {/* Auto-Register Feeds Section */}
            {keywords.length > 0 && (
              <div className="mb-6">
                <div className="bg-gradient-to-r from-blue-50 to-teal-50 rounded-lg p-4 border border-blue-200">
                  <div className="flex items-start gap-3">
                    <input
                      type="checkbox"
                      id="auto-register-feeds"
                      checked={autoRegisterFeeds}
                      onChange={(e) => setAutoRegisterFeeds(e.target.checked)}
                      className="mt-1 w-5 h-5 text-[#14b8a6] border-gray-300 rounded focus:ring-[#14b8a6] cursor-pointer"
                    />
                    <div className="flex-1">
                      <label 
                        htmlFor="auto-register-feeds" 
                        className="text-base font-medium text-gray-800 cursor-pointer block mb-1"
                      >
                        {language === 'ja' ? '🤖 フィードを自動登録' : '🤖 Auto-register feeds'}
                      </label>
                      <p className="text-sm text-gray-600 mb-3">
                        {language === 'ja' 
                          ? 'キーワードに基づいて、AI が関連するフィードを自動的に検索して登録します。'
                          : 'AI will automatically search and register relevant feeds based on your keywords.'
                        }
                      </p>
                      
                      {autoRegisterFeeds && (
                        <div className="mt-3 flex items-center gap-3">
                          <label className="text-sm text-gray-700 font-medium">
                            {language === 'ja' ? '最大登録数:' : 'Max feeds:'}
                          </label>
                          <select
                            value={maxAutoFeeds}
                            onChange={(e) => setMaxAutoFeeds(Number(e.target.value))}
                            className="px-3 py-1 border border-gray-300 rounded-lg text-sm focus:ring-2 focus:ring-[#14b8a6] focus:border-transparent"
                          >
                            {[3, 5, 7, 10].map(num => (
                              <option key={num} value={num}>
                                {num} {language === 'ja' ? '件' : 'feeds'}
                              </option>
                            ))}
                          </select>
                          <span className="text-xs text-gray-500">
                            {language === 'ja' ? '(推奨: 5件)' : '(recommended: 5)'}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex justify-between items-center">
              <button
                onClick={onClose}
                className="px-6 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors"
              >
                {language === 'ja' ? '閉じる' : 'Close'}
              </button>
              
              <button
                onClick={handleSave}
                disabled={keywords.length === 0}
                className="px-6 py-2 bg-[#f59e0b] text-white rounded-lg hover:bg-[#d97706] transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                {language === 'ja' ? '作成' : 'Create'}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Keyword Edit Modal */}
      <KeywordEditModal
        isOpen={showKeywordModal}
        onClose={() => setShowKeywordModal(false)}
        onSave={handleKeywordSave}
        initialKeywords={keywords}
        title={language === 'ja' ? 'キーワード編集' : 'Edit Keywords'}
      />
    </>
  )
}
"use client";

import { useState, useEffect } from "react";
import { useApp } from "@/contexts/AppContext";
import { useTranslation } from "@/lib/i18n";
import { KEYWORD_COLORS, getKeywordColor } from "@/lib/colors";
import { feedApi, ApiError } from "@/lib/api";
import { isValidUrl, getValidationMessage } from "@/lib/validation";
import {
  generateBowerName,
  isAutoGeneratedName,
} from "@/lib/bowerNameGenerator";
import KeywordEditModal from "./KeywordEditModal";
import BowerPreviewModal from "./BowerPreviewModal";
import Toast from "./Toast";

interface BowerEditModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (bower: { name: string; keywords: string[]; feeds: any[] }) => void;
  bower?: any;
}

export default function BowerEditModal({
  isOpen,
  onClose,
  onSave,
  bower,
}: BowerEditModalProps) {
  const { language } = useApp();

  // Color palette for keywords
  const keywordColors = KEYWORD_COLORS;

  const [bowerName, setBowerName] = useState("");
  const [keywords, setKeywords] = useState<string[]>([]);
  const [feeds, setFeeds] = useState<any[]>([]);
  const [newFeedUrl, setNewFeedUrl] = useState("");
  const [showKeywordModal, setShowKeywordModal] = useState(false);
  const [isLoadingFeeds, setIsLoadingFeeds] = useState(false);
  const [isAddingFeed, setIsAddingFeed] = useState(false);
  const [feedError, setFeedError] = useState("");
  const [previewData, setPreviewData] = useState<any>(null);
  const [showPreview, setShowPreview] = useState(false);
  const [isEditingName, setIsEditingName] = useState(false);
  const [tempBowerName, setTempBowerName] = useState("");
  const [hasUserEditedName, setHasUserEditedName] = useState(false);
  const [toast, setToast] = useState<{
    message: string;
    type: "success" | "error";
  } | null>(null);

  // Initialize with bower data and load feeds
  useEffect(() => {
    if (isOpen && bower) {
      setBowerName(bower.name || "");
      setKeywords(bower.keywords || []);
      // Êó¢Â≠ò„ÅÆ„Éê„Ç¶„Ç¢„Éº„ÅÆÂ†¥Âêà„ÄÅÂêçÂâç„ÅåÂ≠òÂú®„Åô„Çå„Å∞„É¶„Éº„Ç∂„Éº„ÅåË®≠ÂÆö„Åó„Åü„ÇÇ„ÅÆ„Å®„Åø„Å™„Åô
      setHasUserEditedName(!!bower.name);

      // Always load feeds from API to ensure we have the latest data
      loadFeeds(bower.id);
    }
  }, [isOpen, bower]);

  // Load feeds for the bower
  const loadFeeds = async (bowerId: string) => {
    if (!bowerId) return;

    setIsLoadingFeeds(true);
    try {
      const feedsData = await feedApi.getFeeds(bowerId);
      // API„Åã„ÇâÂèñÂæó„Åó„Åü„Éï„Ç£„Éº„Éâ„Å´„Ç´„Çπ„Çø„É†„Éï„É©„Ç∞„ÇíË®≠ÂÆö
      const feedsWithCustomFlag = (feedsData || []).map((feed: any) => ({
        ...feed,
        isCustom: feed.isCustom || false, // Êó¢Â≠ò„ÅÆ„Éï„É©„Ç∞„Çí‰øùÊåÅ„ÄÅ„Å™„Åë„Çå„Å∞false
      }));
      setFeeds(feedsWithCustomFlag);
    } catch (error) {
      setFeeds([]);
    } finally {
      setIsLoadingFeeds(false);
    }
  };

  // Reset when modal closes (but preserve feeds when opening)
  useEffect(() => {
    if (!isOpen) {
      setBowerName("");
      setKeywords([]);
      setFeeds([]);
      setNewFeedUrl("");
      setFeedError("");
      setPreviewData(null);
      setShowPreview(false);
      setIsEditingName(false);
      setTempBowerName("");
      setHasUserEditedName(false);
    }
  }, [isOpen]);

  const handleSave = () => {
    const updatedBower = {
      name: bowerName,
      keywords,
      feeds,
    };
    onSave(updatedBower);
    onClose();
  };

  const handleAddFeed = async () => {
    const url = newFeedUrl.trim();
    if (!url) return;

    // Validate URL
    if (!isValidUrl(url)) {
      setFeedError(getValidationMessage("invalidUrl", language));
      return;
    }

    if (!bower?.id) {
      setFeedError(
        language === "ja"
          ? "„Éê„Ç¶„Ç¢„Éº„Çí‰øùÂ≠ò„Åó„Å¶„Åã„Çâ„Éï„Ç£„Éº„Éâ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          : "Please save the bower first before adding feeds"
      );
      return;
    }

    setIsAddingFeed(true);
    setFeedError("");

    try {
      const newFeed = await feedApi.addFeed({
        bower_id: bower.id,
        url: url,
        title: "", // Will be fetched by the API
        description: "",
      });

      // Mark as manually added (custom feed)
      const customFeed = {
        ...newFeed,
        isCustom: true, // „Éï„É©„Ç∞„ÇíËøΩÂä†
        customLabel: language === "ja" ? "„Ç´„Çπ„Çø„É†" : "Custom",
      };

      setFeeds((prev) => [...prev, customFeed]);
      setNewFeedUrl("");
    } catch (error) {
      console.error("Failed to add feed:", error);
      if (error instanceof ApiError) {
        setFeedError(error.message);
      } else {
        setFeedError(
          language === "ja"
            ? "„Éï„Ç£„Éº„Éâ„ÅÆËøΩÂä†„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
            : "Failed to add feed"
        );
      }
    } finally {
      setIsAddingFeed(false);
    }
  };

  const handleRemoveFeed = async (feedId: string) => {
    try {
      await feedApi.deleteFeed(feedId);
      setFeeds((prev) => prev.filter((f) => f.feed_id !== feedId));
    } catch (error) {
      console.error("Failed to remove feed:", error);
      alert(
        language === "ja"
          ? "„Éï„Ç£„Éº„Éâ„ÅÆÂâäÈô§„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
          : "Failed to remove feed"
      );
    }
  };

  const handlePreviewFeed = async () => {
    const url = newFeedUrl.trim();
    if (!url) return;

    if (!isValidUrl(url)) {
      setFeedError(getValidationMessage("invalidUrl", language));
      return;
    }

    setFeedError("");

    try {
      const preview = await feedApi.previewFeedByUrl(url);
      setPreviewData(preview);
      setShowPreview(true);
    } catch (error) {
      console.error("Failed to preview feed:", error);
      if (error instanceof ApiError) {
        setFeedError(error.message);
      } else {
        setFeedError(
          language === "ja"
            ? "„Éï„Ç£„Éº„Éâ„ÅÆ„Éó„É¨„Éì„É•„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
            : "Failed to preview feed"
        );
      }
    }
  };

  const handlePreviewExistingFeed = async (feedId: string) => {
    try {
      const preview = await feedApi.previewFeed(feedId);
      setPreviewData(preview);
      setShowPreview(true);
    } catch (error) {
      console.error("Failed to preview feed:", error);
      alert(
        language === "ja"
          ? "„Éï„Ç£„Éº„Éâ„ÅÆ„Éó„É¨„Éì„É•„Éº„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
          : "Failed to preview feed"
      );
    }
  };

  const handleKeywordSave = async (newKeywords: string[]) => {
    setKeywords(newKeywords);

    // Auto-generate bower name only if user hasn't manually edited it AND name is empty
    if (!hasUserEditedName && !bowerName.trim()) {
      const generatedName = generateBowerName(newKeywords, language);
      setBowerName(generatedName);
    }

    // „Ç≠„Éº„ÉØ„Éº„ÉâÂ§âÊõ¥ÊôÇ„Å´„Éï„Ç£„Éº„ÉâÊé®Â•®„ÇíÂèñÂæó„Åó„Å¶Ëá™ÂãïÁöÑ„Å´„Éá„Éº„Çø„Éô„Éº„Çπ„Å´‰øùÂ≠ò
    if (bower?.id && newKeywords.length > 0) {
      console.log("üîç Auto-registering feeds for keywords:", newKeywords);
      setIsLoadingFeeds(true);

      try {
        // „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆauto-register API„Çí‰ΩøÁî®ÔºàÊé®Â•®„Éï„Ç£„Éº„Éâ„ÇíËá™ÂãïÁöÑ„Å´DB„Å´‰øùÂ≠òÔºâ
        const result = await feedApi.autoRegisterFeeds(
          bower.id,
          newKeywords,
          5
        );

        console.log("üì• Auto-register result:", result);

        if (result && result.added_feeds && result.added_feeds.length > 0) {
          // ËøΩÂä†„Åï„Çå„Åü„Éï„Ç£„Éº„Éâ„ÇíUI„Å´ÂèçÊò†
          setFeeds((prev) => [...prev, ...result.added_feeds]);
          console.log(`‚úÖ Auto-registered ${result.added_feeds.length} feeds`);

          // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
          setToast({
            message:
              language === "ja"
                ? `${result.added_feeds.length}‰ª∂„ÅÆ„Éï„Ç£„Éº„Éâ„ÇíËá™ÂãïÁôªÈå≤„Åó„Åæ„Åó„Åü`
                : `Auto-registered ${result.added_feeds.length} feeds`,
            type: "success",
          });

          // „Éï„Ç£„Éº„Éâ„ÅÆË®ò‰∫ã„ÇíÂèñÂæóÔºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂÆüË°åÔºâ
          try {
            console.log("üì° Fetching articles for newly registered feeds...");
            await feedApi.fetchBowerFeeds(bower.id);
            console.log("‚úÖ Articles fetched successfully");
          } catch (fetchError) {
            console.error("‚ö†Ô∏è Failed to fetch articles:", fetchError);
            // „Ç®„É©„Éº„ÅØÁÑ°Ë¶ñÔºà„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÂá¶ÁêÜ„ÅÆ„Åü„ÇÅÔºâ
          }
        } else {
          console.log("‚ÑπÔ∏è No new feeds to register");
        }

        // „Çπ„Ç≠„ÉÉ„Éó„Åï„Çå„Åü„Éï„Ç£„Éº„Éâ„Åå„ÅÇ„ÇãÂ†¥Âêà
        if (result && result.skipped_feeds && result.skipped_feeds.length > 0) {
          console.log(
            `‚ÑπÔ∏è Skipped ${result.skipped_feeds.length} duplicate feeds`
          );
        }

        // Â§±Êïó„Åó„Åü„Éï„Ç£„Éº„Éâ„Åå„ÅÇ„ÇãÂ†¥Âêà
        if (result && result.failed_feeds && result.failed_feeds.length > 0) {
          console.log(
            `‚ö†Ô∏è Failed to register ${result.failed_feeds.length} feeds`
          );
        }
      } catch (error) {
        console.error("‚ùå Failed to auto-register feeds:", error);
        setToast({
          message:
            language === "ja"
              ? "„Éï„Ç£„Éº„Éâ„ÅÆËá™ÂãïÁôªÈå≤„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
              : "Failed to auto-register feeds",
          type: "error",
        });
      } finally {
        setIsLoadingFeeds(false);
      }
    }

    // Real API-based auto-add (commented out for now)
    /*
    if (bower?.id && newKeywords.length > 0) {
      console.log('‚úÖ Conditions met for auto-adding feeds')
      console.log('Bower ID:', bower.id)
      console.log('Keywords to process:', newKeywords)
      await autoAddFeedsForKeywords(newKeywords)
    } else {
      console.log('‚ùå Skipping auto-add feeds')
      console.log('- bower?.id:', bower?.id)
      console.log('- newKeywords.length:', newKeywords.length)
      console.log('- bower object:', bower)
    }
    */
  };

  // Auto-add feeds based on keywords
  const autoAddFeedsForKeywords = async (keywords: string[]) => {
    console.log("=== autoAddFeedsForKeywords called ===");
    console.log("Input keywords:", keywords);
    console.log("Bower object:", bower);
    console.log("Current feeds state:", feeds);

    if (!bower?.id) {
      console.log("‚ùå No bower ID available for auto-adding feeds");
      console.log("bower?.id:", bower?.id);
      return;
    }

    console.log(
      "‚úÖ Starting auto-add feeds for bower:",
      bower.id,
      "keywords:",
      keywords
    );

    // Sample feed URLs for different keywords (case-insensitive matching)
    const keywordFeedMap: Record<string, string[]> = {
      // English keywords
      ai: [
        "https://feeds.feedburner.com/oreilly/radar",
        "https://ai.googleblog.com/feeds/posts/default",
      ],
      programming: [
        "https://dev.to/feed/tag/programming",
        "https://stackoverflow.com/feeds",
      ],
      technology: [
        "https://techcrunch.com/feed/",
        "https://www.wired.com/feed/",
      ],
      design: [
        "https://www.smashingmagazine.com/feed/",
        "https://dribbble.com/shots/popular.rss",
      ],
      javascript: [
        "https://javascript.plainenglish.io/feed",
        "https://dev.to/feed/tag/javascript",
      ],
      react: ["https://dev.to/feed/tag/react", "https://reactjs.org/feed.xml"],
      python: [
        "https://realpython.com/atom.xml",
        "https://dev.to/feed/tag/python",
      ],
      webdev: [
        "https://css-tricks.com/feed/",
        "https://dev.to/feed/tag/webdev",
      ],
      startup: [
        "https://techcrunch.com/startups/feed/",
        "https://www.producthunt.com/feed",
      ],
      business: [
        "https://hbr.org/feed",
        "https://www.entrepreneur.com/latest.rss",
      ],

      // Japanese keywords
      „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞: [
        "https://qiita.com/tags/programming/feed",
        "https://zenn.dev/feed",
      ],
      „ÉÜ„ÇØ„Éé„É≠„Ç∏„Éº: [
        "https://techcrunch.com/feed/",
        "https://www.wired.com/feed/",
      ],
      „Éá„Ç∂„Ç§„É≥: [
        "https://www.smashingmagazine.com/feed/",
        "https://dribbble.com/shots/popular.rss",
      ],
      webÈñãÁô∫: [
        "https://css-tricks.com/feed/",
        "https://dev.to/feed/tag/webdev",
      ],
      „Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„Éó: [
        "https://techcrunch.com/startups/feed/",
        "https://www.producthunt.com/feed",
      ],
      „Éì„Ç∏„Éç„Çπ: [
        "https://hbr.org/feed",
        "https://www.entrepreneur.com/latest.rss",
      ],
    };

    const existingUrls = feeds.map((feed) => feed.url);
    // ‰∏¶ÂàóÂá¶ÁêÜÁî®: ÂÖ®„Å¶„ÅÆ„Éï„Ç£„Éº„ÉâURL„ÇíÂèéÈõÜ
    const allFeedUrls: string[] = [];

    for (const keyword of keywords) {
      const keywordLower = keyword.toLowerCase();
      const feedUrls =
        keywordFeedMap[keyword] || keywordFeedMap[keywordLower] || [];

      console.log(
        `Checking keyword "${keyword}" (${keywordLower}):`,
        feedUrls.length,
        "feeds found"
      );

      for (const url of feedUrls) {
        if (!existingUrls.includes(url) && !allFeedUrls.includes(url)) {
          allFeedUrls.push(url);
        }
      }
    }

    // ÊúÄÂ§ß2„Å§„ÅÆ„Éï„Ç£„Éº„Éâ„Å´Âà∂Èôê
    const feedsToAdd = allFeedUrls.slice(0, 2);
    console.log(
      `üöÄ Adding ${feedsToAdd.length} feeds in parallel:`,
      feedsToAdd
    );

    // Promise.all„Åß‰∏¶ÂàóÂÆüË°å
    const startTime = Date.now();
    const feedPromises = feedsToAdd.map(async (url) => {
      try {
        console.log(`üì° Adding feed: ${url}`);
        const newFeed = await feedApi.addFeed({
          bower_id: bower.id,
          url: url,
          title: "",
          description: "",
        });
        console.log(`‚úÖ Successfully added: ${url}`);
        return { success: true, feed: newFeed, url };
      } catch (error) {
        console.error(`‚ùå Failed to add ${url}:`, error);
        return { success: false, error, url };
      }
    });

    const results = await Promise.all(feedPromises);
    const endTime = Date.now();

    // ÁµêÊûú„ÅÆÈõÜË®à
    const newFeeds = results.filter((r) => r.success).map((r) => r.feed);
    const successCount = results.filter((r) => r.success).length;
    const errorCount = results.filter((r) => !r.success).length;
    const totalAttempts = results.length;

    console.log(
      `‚è±Ô∏è Parallel feed addition completed in ${endTime - startTime}ms`
    );
    console.log(
      `üìä Results: ${successCount} success, ${errorCount} failed out of ${totalAttempts} attempts`
    );

    console.log(
      `Auto-add feeds summary: ${successCount} success, ${errorCount} errors, ${totalAttempts} total attempts`
    );

    if (newFeeds.length > 0) {
      console.log("‚úÖ Adding feeds to state:", newFeeds);
      setFeeds((prev) => {
        const updated = [...prev, ...newFeeds];
        console.log("Updated feeds state:", updated);
        return updated;
      });

      // Show success message
      const message =
        language === "ja"
          ? `${newFeeds.length}ÂÄã„ÅÆ„Éï„Ç£„Éº„Éâ„ÇíËá™ÂãïËøΩÂä†„Åó„Åæ„Åó„Åü`
          : `Auto-added ${newFeeds.length} feeds`;

      console.log("‚úÖ", message);
      alert(message); // Temporary alert for testing
    } else {
      console.log("‚ùå No feeds were auto-added");
    }
  };

  const handleNameEdit = () => {
    setTempBowerName(bowerName);
    setIsEditingName(true);
  };

  const handleNameSave = () => {
    const newName =
      tempBowerName.trim() || generateBowerName(keywords, language);
    setBowerName(newName);
    setIsEditingName(false);
    // „É¶„Éº„Ç∂„Éº„ÅåÊâãÂãï„ÅßÂêçÂâç„ÇíÁ∑®ÈõÜ„Åó„Åü„Åì„Å®„ÇíË®òÈå≤ÔºàÁ©∫„Åß„Å™„ÅÑÂ†¥Âêà„ÅÆ„ÅøÔºâ
    setHasUserEditedName(true);
  };

  const handleNameCancel = () => {
    setTempBowerName("");
    setIsEditingName(false);
  };

  const handleNameKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter") {
      handleNameSave();
    } else if (e.key === "Escape") {
      handleNameCancel();
    }
  };

  if (!isOpen) return null;

  return (
    <>
      <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b bg-amber-100">
            <div className="flex items-center gap-2 flex-1">
              <div className="text-2xl">ü™∫</div>
              {isEditingName ? (
                <div className="flex items-center gap-2 flex-1">
                  <input
                    type="text"
                    value={tempBowerName}
                    onChange={(e) => setTempBowerName(e.target.value)}
                    onKeyDown={handleNameKeyPress}
                    onBlur={handleNameSave}
                    className="text-2xl font-bold text-gray-800 bg-white border border-gray-300 rounded px-3 py-2 flex-1 focus:ring-2 focus:ring-[#14b8a6] focus:border-transparent"
                    placeholder={
                      language === "ja"
                        ? "„Éê„Ç¶„Ç¢„ÉºÂêç„ÇíÂÖ•Âäõ..."
                        : "Enter bower name..."
                    }
                    autoFocus
                  />
                  <button
                    onClick={handleNameSave}
                    className="text-green-600 hover:text-green-800 text-sm"
                  >
                    ‚úì
                  </button>
                  <button
                    onClick={handleNameCancel}
                    className="text-red-600 hover:text-red-800 text-sm"
                  >
                    ‚úï
                  </button>
                </div>
              ) : (
                <h2
                  className="text-2xl font-bold text-gray-800 cursor-pointer hover:text-[#14b8a6] transition-colors flex-1"
                  onClick={handleNameEdit}
                  title={
                    language === "ja" ? "„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Á∑®ÈõÜ" : "Click to edit"
                  }
                >
                  {bowerName ||
                    (language === "ja" ? "Êñ∞„Åó„ÅÑ„Éê„Ç¶„Ç¢„Éº" : "New Bower")}
                  <span className="ml-2 text-lg text-gray-500">‚úèÔ∏è</span>
                </h2>
              )}
            </div>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 text-2xl ml-4"
            >
              ‚úï
            </button>
          </div>

          {/* Content */}
          <div className="p-6">
            {/* Keywords Section */}
            <div className="mb-6">
              <div className="flex items-center justify-between mb-3">
                <label className="block text-base font-medium text-gray-700">
                  {language === "ja" ? "„Ç≠„Éº„ÉØ„Éº„Éâ" : "Keywords"}
                </label>
                <button
                  onClick={() => setShowKeywordModal(true)}
                  className="px-5 py-3 bg-[#14b8a6] text-white rounded-lg hover:bg-[#0f766e] transition-colors text-base"
                >
                  {language === "ja" ? "„Ç≠„Éº„ÉØ„Éº„ÉâÁ∑®ÈõÜ" : "Edit Keywords"}
                </button>
              </div>

              {keywords.length === 0 ? (
                <div
                  className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:border-[#14b8a6] hover:bg-gray-50 transition-colors"
                  onClick={() => setShowKeywordModal(true)}
                >
                  <p className="text-gray-500 mb-4 text-base">
                    {language === "ja"
                      ? "„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                      : "Please set keywords"}
                  </p>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowKeywordModal(true);
                    }}
                    className="px-5 py-3 bg-[#14b8a6] text-white rounded-lg hover:bg-[#0f766e] transition-colors text-base"
                  >
                    {language === "ja" ? "„Ç≠„Éº„ÉØ„Éº„ÉâÁ∑®ÈõÜ" : "Edit Keywords"}
                  </button>
                </div>
              ) : (
                <div className="flex flex-wrap gap-2">
                  {keywords.map((keyword, index) => (
                    <span
                      key={index}
                      className="px-4 py-2 text-white rounded-full text-base font-medium"
                      style={{ backgroundColor: getKeywordColor(keyword) }}
                    >
                      {keyword}
                    </span>
                  ))}
                </div>
              )}
            </div>

            {/* Feeds Section */}
            <div className="mb-6">
              <label className="block text-base font-medium text-gray-700 mb-3">
                {language === "ja" ? "„Éï„Ç£„Éº„Éâ" : "Feeds"}
                <span className="ml-2 text-sm text-gray-500">
                  ({feeds.length} feeds)
                </span>
              </label>
              <p className="text-base text-gray-600 mb-4">
                {language === "ja"
                  ? "„Ç≠„Éº„ÉØ„Éº„Éâ„Å´Èñ¢ÈÄ£„Åô„Çã„Éï„Ç£„Éº„Éâ„ÅåËá™Âãï„ÅßÁôªÈå≤„Åï„Çå„Åæ„Åô„ÄÇËøΩÂä†„ÉªÂâäÈô§„Åß„Åç„Åæ„Åô„ÄÇ"
                  : "Feeds related to keywords are automatically registered. You can add or remove them."}
              </p>

              {/* Loading Feeds */}
              {isLoadingFeeds && (
                <div className="flex items-center justify-center p-4 text-gray-500">
                  <div className="animate-spin mr-2">üê£</div>
                  {language === "ja"
                    ? "„Éï„Ç£„Éº„Éâ„ÇíË™≠„ÅøËæº„Åø‰∏≠..."
                    : "Loading feeds..."}
                </div>
              )}

              {/* Existing Feeds - Prototype Style */}
              {!isLoadingFeeds && feeds.length > 0 && (
                <div className="space-y-2 mb-4">
                  {feeds.map((feed, index) => {
                    // „Éï„Ç£„Éº„Éâ„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éº„Åæ„Åü„ÅØ„Çø„Ç§„Éà„É´„Åã„Çâ„ÄÅ„Éû„ÉÉ„ÉÅ„Åó„Åü„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíË¶ã„Å§„Åë„Çã
                    const matchedKeyword = keywords.find((k) => {
                      const kLower = k.toLowerCase();
                      const titleLower = (feed.title || "").toLowerCase();
                      const categoryLower = (feed.category || "").toLowerCase();
                      const descriptionLower = (
                        feed.description || ""
                      ).toLowerCase();

                      return (
                        titleLower.includes(kLower) ||
                        categoryLower.includes(kLower) ||
                        descriptionLower.includes(kLower)
                      );
                    });

                    // Ë°®Á§∫„Åô„Çã„É©„Éô„É´: „Ç´„ÉÜ„Ç¥„É™„Éº > „Éû„ÉÉ„ÉÅ„Åó„Åü„Ç≠„Éº„ÉØ„Éº„Éâ > „Éá„Éï„Ç©„É´„Éà
                    const displayLabel =
                      feed.category ||
                      matchedKeyword ||
                      (language === "ja" ? "„Éï„Ç£„Éº„Éâ" : "Feed");

                    return (
                      <div
                        key={feed.feed_id || feed.url}
                        className="flex items-center justify-between p-2 bg-gray-50 rounded-lg"
                      >
                        <div className="flex items-center gap-3 flex-1">
                          <div className="text-sm text-gray-600 truncate max-w-md">
                            {feed.title || feed.url}
                          </div>
                          <div className="flex items-center gap-2 flex-shrink-0">
                            {/* „Ç≠„Éº„ÉØ„Éº„Éâ„É©„Éô„É´ */}
                            <span
                              className="px-2 py-1 text-xs text-white rounded-full whitespace-nowrap"
                              style={{
                                backgroundColor: getKeywordColor(
                                  matchedKeyword || displayLabel
                                ),
                              }}
                            >
                              {displayLabel}
                            </span>
                            {/* „Ç´„Çπ„Çø„É†„É©„Éô„É´ */}
                            {feed.isCustom && (
                              <span className="px-2 py-1 text-xs bg-purple-100 text-purple-700 rounded-full border border-purple-200 whitespace-nowrap">
                                {language === "ja" ? "„Ç´„Çπ„Çø„É†" : "Custom"}
                              </span>
                            )}
                          </div>
                        </div>
                        {feeds.length > 1 && (
                          <button
                            onClick={() => handleRemoveFeed(feed.feed_id)}
                            className="text-red-500 hover:text-red-700 text-sm px-2 flex-shrink-0"
                          >
                            ÂâäÈô§
                          </button>
                        )}
                      </div>
                    );
                  })}
                </div>
              )}

              {/* No Feeds Message */}
              {!isLoadingFeeds && feeds.length === 0 && (
                <div className="text-center p-4 text-gray-500 bg-gray-50 rounded-lg mb-4">
                  {language === "ja"
                    ? "„Éï„Ç£„Éº„Éâ„ÅåÁôªÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
                    : "No feeds registered"}
                </div>
              )}

              {/* Add New Feed */}
              <div className="space-y-2">
                <div className="flex gap-2">
                  <input
                    type="url"
                    value={newFeedUrl}
                    onChange={(e) => {
                      setNewFeedUrl(e.target.value);
                      setFeedError("");
                    }}
                    className={`flex-1 px-3 py-2 border rounded-lg focus:ring-2 focus:ring-[#14b8a6] focus:border-transparent text-sm ${
                      feedError ? "border-red-300" : "border-gray-300"
                    }`}
                    placeholder="https://example.com/feed.xml"
                  />
                  <button
                    onClick={handlePreviewFeed}
                    disabled={!newFeedUrl.trim() || isAddingFeed}
                    className="px-4 py-2 border-2 border-blue-500 text-blue-500 rounded-lg hover:bg-blue-500 hover:text-white transition-colors disabled:border-gray-300 disabled:text-gray-300 disabled:cursor-not-allowed text-sm"
                  >
                    {language === "ja" ? "„Éó„É¨„Éì„É•„Éº" : "Preview"}
                  </button>
                  <button
                    onClick={handleAddFeed}
                    disabled={!newFeedUrl.trim() || isAddingFeed || !bower?.id}
                    className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed text-sm flex items-center gap-1"
                  >
                    {isAddingFeed && <div className="animate-spin">üê£</div>}
                    {language === "ja" ? "ËøΩÂä†" : "Add"}
                  </button>
                </div>

                {/* Error Message */}
                {feedError && (
                  <div className="text-red-500 text-sm">{feedError}</div>
                )}

                {/* Help Text */}
                <div className="text-xs text-gray-500">
                  {language === "ja"
                    ? "RSS/Atom„Éï„Ç£„Éº„Éâ„ÅÆURL„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºà‰æã: /feed, /rss, .xmlÔºâ"
                    : "Enter RSS/Atom feed URL (e.g., /feed, /rss, .xml)"}
                </div>
              </div>
            </div>

            {/* Warning message when no feeds - positioned above buttons */}
            {feeds.length === 0 && keywords.length > 0 && (
              <div className="mb-4 text-center">
                <div className="inline-block text-sm text-orange-600 bg-orange-50 px-3 py-2 rounded-lg border border-orange-200">
                  {language === "ja"
                    ? "„Ç≠„Éº„ÉØ„Éº„Éâ„Åæ„Åü„ÅØ„Éï„Ç£„Éº„Éâ„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                    : "Please add keywords or feeds"}
                </div>
              </div>
            )}

            {/* Action Buttons */}
            <div className="flex justify-between items-center">
              <button
                onClick={onClose}
                className="px-6 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors"
              >
                {language === "ja" ? "Èñâ„Åò„Çã" : "Close"}
              </button>

              <div className="flex gap-3">
                <button
                  onClick={handleSave}
                  disabled={feeds.length === 0 && keywords.length === 0}
                  className="px-6 py-2 bg-[#f59e0b] text-white rounded-lg hover:bg-[#d97706] transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
                >
                  {language === "ja" ? "‰øùÂ≠ò" : "Save"}
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Keyword Edit Modal */}
      <KeywordEditModal
        isOpen={showKeywordModal}
        onClose={() => setShowKeywordModal(false)}
        onSave={handleKeywordSave}
        initialKeywords={keywords}
        title={language === "ja" ? "„Ç≠„Éº„ÉØ„Éº„ÉâÁ∑®ÈõÜ" : "Edit Keywords"}
      />

      {/* Bower Preview Modal */}
      <BowerPreviewModal
        isOpen={showPreview}
        onClose={() => setShowPreview(false)}
        bower={
          bower
            ? { ...bower, feeds }
            : {
                id: "preview",
                name:
                  bowerName ||
                  (language === "ja" ? "Êñ∞„Åó„ÅÑ„Éê„Ç¶„Ç¢„Éº" : "New Bower"),
                keywords,
                feeds,
              }
        }
      />

      {/* Feed Preview Modal (for individual feed previews) */}
      {previewData && (
        <div className="fixed inset-0 bg-black bg-opacity-50 z-60 flex items-center justify-center p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-bold text-gray-800">
                {language === "ja" ? "„Éï„Ç£„Éº„Éâ„Éó„É¨„Éì„É•„Éº" : "Feed Preview"}
              </h3>
              <button
                onClick={() => {
                  setPreviewData(null);
                  setNewFeedUrl("");
                }}
                className="text-gray-500 hover:text-gray-700 text-2xl"
              >
                ‚úï
              </button>
            </div>
            <div className="p-6">
              <div className="space-y-4">
                <div>
                  <h4 className="font-bold text-lg">{previewData.title}</h4>
                  <p className="text-gray-600">{previewData.description}</p>
                  <p className="text-sm text-gray-500">{previewData.url}</p>
                </div>
                {previewData.articles && previewData.articles.length > 0 && (
                  <div>
                    <h5 className="font-medium mb-2">
                      {language === "ja" ? "ÊúÄÊñ∞Ë®ò‰∫ã" : "Recent Articles"}
                    </h5>
                    <div className="space-y-2 max-h-60 overflow-y-auto">
                      {previewData.articles
                        .slice(0, 5)
                        .map((article: any, index: number) => (
                          <div key={index} className="p-3 bg-gray-50 rounded">
                            <div className="font-medium text-sm">
                              {article.title}
                            </div>
                            <div className="text-xs text-gray-500">
                              {article.published_at}
                            </div>
                          </div>
                        ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Toast Notifications */}
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </>
  );
}
